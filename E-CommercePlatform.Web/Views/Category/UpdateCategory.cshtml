
@{
    ViewBag.Title = "Update-Category-Page";
    Layout = "~/Views/Dashboard/Shared/_DashboardLayout.cshtml";
}

<div>
    <h2>修 改 类 别</h2>

    <form id="tableForm" method="post" enctype="multipart/form-data">
        <label>名 称</label>
        <input id="nameInput" name="Name" />
        <br />

        <label>描 述</label>
        <input id="descriptionInput" name="Description" />
        <br />

        <label>图 片</label>
        <!-- 选择按钮 -->
        <input id="selectButton" name="ImageUrl" type="file" accept=".jpg, .png" alt="未加载图片" />
        <br />

        <!-- 预览图片 -->
        <div class="img-thumbnail">
            <img id="previewImage" src="#" width="300" />
        </div>

        <label>精 选</label>
        <input id="trueFeatured" name="IsFeatured" type="radio" value="true" />属于
        <input id="falseFeatured" name="IsFeatured" type="radio" value="false" />不属于
        <br />

        <button id="confirmButton" type="submit">确定</button>
    </form>
</div>

<script>
    const tableForm = document.getElementById("tableForm"); // 通过id属性，获取表单数据
    const selectButton = document.getElementById("selectButton"); // 通过id属性，获取选择按钮
    const previewImage = document.getElementById("previewImage"); // 通过id属性，获取预览图片
    const confirmButton = document.getElementById("confirmButton"); // 通过id属性，获取提交按钮


    // 监听选择图片按钮的变化事件
    selectButton.addEventListener("change", function () {
        const choseFile = selectButton.files[0]; // 获取选择的文件
        if (choseFile) {
            const reader = new FileReader(); // 创建FileReader对象

            // 监听文件读取完成事件
            reader.onload = function (e) {
                previewImage.src = e.target.result; // 设置预览图片的src属性为选择的文件
            };
            reader.readAsDataURL(choseFile); // 将文件读取为DataURL格式
        }
    })


    // 监听提交按钮的点击事件
    confirmButton.addEventListener("click", function (ex) {
        ex.preventDefault(); // 阻止按钮submit属性的默认提交
        const formPayload = new FormData(tableForm); // 创建一个新的FormData对象，封装表单数据

        // 发送AJAX请求
        fetch("/Category/CreateCategory", {
            method: "POST", // 请求方法
            body: formPayload, // 请求体
        })
            // 后端请求成功后返回响应，检查响应状态
            .then((response) => {
                if (response.ok) {
                    return response.json(); // 将响应体解析为JSON格式，并传递给下一个then
                } else {
                    throw new Error("发送网络错误！"); // 响应状态不在200-299范围内，抛出错误
                }
            })
            // 处理解析后的JSON数据，检查后端业务的结果
            .then((data) => {
                if (data.Success) {
                    alert(data.Message); // 后端业务成功消息提示
                    tableForm.reset(); // 重置表单
                    window.location.href = data.RedirectUrl; // 前端重定向到分类列表首页
                } else {
                    alert("数据异常！" + data.Message); // 后端业务失败消息提示
                }
            })
            // 捕获请求或解析JSON时的错误
            .catch((error) => {
                console.error("请求失败：", error); // 捕获并打印错误
            });
    })
</script>